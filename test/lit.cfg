import os, sys
import lit.formats

config.name = 'apple-llvm'
config.test_format = lit.formats.ShTest(execute_external=False)

# suffixes: A list of file extensions to treat as test files.
config.suffixes = ['.test']

# excludes: A list of individual files to exclude.
config.excludes = ['Inputs']

# test_source_root: where to run the tests from
config.test_source_root = os.path.dirname(__file__)

# test_exec_root: The root path where tests should be run.
config.test_exec_root = os.path.join(config.test_source_root, 'Run.lit')

src_root = os.path.dirname(config.test_source_root)
bindir = os.path.join(src_root, 'bin')
testbindir = os.path.join(config.test_source_root, 'bin')
python_root_dir = os.path.join(config.test_source_root, '.python_env', 'bin')

# Update the path.
path = config.environment['PATH']
config.environment['PATH'] = os.path.pathsep.join((python_root_dir, bindir, testbindir, path))

def has_git_v2_18():
    # Get the Git version.
    import subprocess
    raw_git_version = str(subprocess.check_output(['git', '--version']))
    git_version_number = raw_git_version.split(' ')[2]
    git_version = [int(x) for x in git_version_number.split('.')]
    if int(git_version[0]) < 2:
        return False
    if int(git_version[0]) > 2:
        return True
    return (git_version[1]) >= 18

if has_git_v2_18():
    config.available_features.add('git-v2.18+')

# Add substitutions for built programs.
builtdir = os.path.join(config.test_source_root, 'Built')
config.substitutions.append(('%split2mono', os.path.join(builtdir, 'split2mono')))
config.substitutions.append(('%svn2git', os.path.join(builtdir, 'svn2git')))
