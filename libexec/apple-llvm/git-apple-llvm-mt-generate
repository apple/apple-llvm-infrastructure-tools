#!/bin/bash

NONGIT_OK=1
. "$(dirname $0)"/helpers/init.sh
helper canonicalize_path
helper mt_llvm_svn
helper mt_llvm_svn2git

usage() {
    printf "%s\n"                                                             \
        "usage: $(print_cmdname) [options] <name>"                            \
        ""                                                                    \
        "   --config-dir=<dir>"                                               \
        "                   Config directory to find <name>.mt-config in"     \
        "   --git-dir=<dir> Git directory to use (default: $DEFAULT_GIT_DIR)" \
        "   --[no-]verbose  Use verbose output (default: \$VERBOSE)"          \
        "   --[no-]setup    Set up and update remotes (default: on)"          \
        "   --[no-]clean    Clean local progress (default: off, for now)"     \
        "   --[no-]push     Push to the destination(s) (default: on)"         \
        "   --push-only     Only push previous results"                       \
        "   --dry-run       Don't actually generate anything"                 \
        "   --show-{monorepo,splitref}-destination"                           \
        "                   Show the monorepo or splitref desitnation repo"   \
        "   --list-actions  List generate actions in order (and exit)"        \
        "   --list-repos    List repos (and exit)"                            \
        "   --list-branches List branches to generate (and exit)"             \
        "   --list-dirs     List declared dirs (and exit)"                    \
        "   --list-(active|inactive|repeat)-dirs=<branch>"                    \
        "                   List active, inactive, or repeated dirs for"      \
        "                   <branch> (and exit)"                              \
        "   --list-(active|inactive|repeat|all)-refdirs=<branch>"             \
        "                   List active, inactive, repeated, or all dirs for" \
        "                   <branch> in <ref>:<dir> format (and exit)"
}

DEFAULT_CONFIG_DIR="$(
    relative_canonicalize_path "$APPLE_LLVM_LIBEXEC_DIR/../../mt-config")"
DEFAULT_GIT_DIR=mt-repo.git

print_list() {
    local list="$1"
    shift
    local which="$list"
    case "$list" in
        --show-monorepo-destination) show_monorepo_destination; return $? ;;
        --show-splitref-destination) show_splitref_destination; return $? ;;
        *) true ;;
    esac

    which="${which#--list-}"
    which="${which%%=*}"
    which="${which//-/_}"

    is_function print_"$which" || usage_error "unknown option '$list'"
    print_"$which" "$@"
}
print_actions() {
    cat "$MT_CONFIG" | awk '$1 == "generate" {print $2, $3}'
}
print_repos() { cat "$MT_CONFIG" | awk '$1 == "repo" {print $2, $3}'; }
print_branches() { print_actions | awk '$1 == "branch" {print $2}' | sort; }
print_dirs() {
    cat "$MT_CONFIG" | awk '$1 == "declare-dir" {print $2}' | sort
}
print_repeat() {
    awk -v branch="$1" '
    $1 == "repeat" && $2 == branch {
        if (any) {
            printf "error: %s:%s: second repeat for branch %s\n" >"/dev/stderr"
            exit 1
        }
        print $3
        any = 1
    }' "$MT_CONFIG"
}
print_active_dirs()      { print_dirs_impl "$1" 1 0 0 0 0; }
print_inactive_dirs()    { print_dirs_impl "$1" 0 1 0 0 0; }
print_repeat_dirs()      { print_dirs_impl "$1" 0 0 1 0 0; }
print_active_refdirs()   { print_dirs_impl "$1" 1 0 0 1 0; }
print_inactive_refdirs() { print_dirs_impl "$1" 0 1 0 1 0; }
print_repeat_refdirs()   { print_dirs_impl "$1" 0 0 1 1 0; }
print_all_refdirs()      { print_dirs_impl "$1" 1 1 1 1 0; }
print_undeclared_dirs()  { print_dirs_impl "$1" 1 0 0 0 1; }
print_dirs_impl() {
    local branch="$1" undecl=$6
    awk_helper mt-config-dirs -v branch="$branch" -v active=$2              \
        -v inactive=$3 -v repeat=$4 -v refs=$5 -v undecl=$undecl            \
        "$MT_CONFIG" "$MT_CONFIG"
}

show_monorepo_destination() { show_destination monorepo; }
show_splitref_destination() { show_destination splitref; }
show_destination() {
    run cat "$MT_CONFIG" |
    awk -v which="$1" '
    $1 == "destination" && $2 == which {
        if (destination) {
            destination = destination " " $3
            count = count + 1
        } else {
            destination = $3
            count = 1
        }
    }
    END {
      if (count == 0) {
          printf "error: no %s destination specified\n", which >"/dev/stderr"
          exit 1
      }
      if (count > 1) {
          printf "error: multiple %s destinations specified: %s\n", \
            which, destination >"/dev/stderr"
          exit 1
      }
      print destination
    }'
}

MTDB_REF=refs/mt/mt-db
MTDB_SHA1= MTDB_LOCAL_REF=
mt_setup() {
    GIT_DIR="$(canonicalize_path "$GIT_DIR")"
    MT_CONFIG="$(canonicalize_path "$MT_CONFIG")"

    # Always change directory.
    if ! should_setup; then
        run cd "$GIT_DIR"
        return $?
    fi

    # Verbose output.
    local gitout=/dev/null
    local hide=--hide-errors
    if [ ! "${VERBOSE:-0}" = 0 ]; then
        gitout=/dev/stdout
        hide=
    fi

    # Clean up any local progress.
    if should_clean; then
        local existing
        existing="$(git show-ref | grep -e ^refs/mt -e ^refs/heads |
            awk '{print $2}')" ||
            error "failed to look up refs to clean"
        [ -z "$existing" ] || run git update-ref -d $existing ||
            error "failed to clean local refs: $existing"
        local prev_existing=
        while existing="$(git worktree list --porcelain |
            awk '$1=="worktree"{print substr($0,10); exit 0} END{exit 1}')"; do
            # Prevent an infinite loop, if somehow we stop making progress.
            # Probably not actaully reachable, but better to be paranoid.
            [ ! "$prev_existing" = "$existing" ] ||
                error "failed to clean worktrees"
            prev_existing="$existing"

            run git worktree remove --force "$existing" ||
                error "failed to clean worktree: $existing"
        done
    fi

    log "Setting up and syncing $GIT_DIR"
    log "  (based on $MT_CONFIG)"
    [ -d "$GIT_DIR" ] ||
        run --hide-errors git init --bare "$GIT_DIR" >$gitout ||
        error "failed to initialize '$GIT_DIR'"
    run cd "$GIT_DIR" || error "failed to cd to $GIT_DIR"
    log "Updating remotes in parallel"

    print_repos | {
        local forks= name= url= clone=
        while read name url; do
            mt_setup_repo &
            forks="$forks $!"
        done
        run wait $forks
    } || return 1

    log "Combining object databases"
    print_repos |
    while read name url; do
        log "  - $name"
        # Ignore errors here, since often the remote will already exist.
        run --hide-errors git remote add $name $PWD/clones/$name.git >$gitout
        run $hide git fetch --no-tags $name >$gitout ||
        error "failed to sync '$GIT_DIR'"
    done || return 1

    # Check that the destination repos work.
    local splitdest monodest
    splitdest="$(show_splitref_destination)" || exit 1
    monodest="$(show_monorepo_destination)" || exit 1

    run git remote | run grep "$splitdest" >/dev/null ||
        error "splitref destination '$splitdest' is not a repo"
    run git remote | run grep "$monodest" >/dev/null ||
        error "monorepo destination '$monodest' is not a repo"

    # Fetch the mt-db ref.
    log "Syncing mt-db from $monodest"
    MTDB_SHA1=$(run git ls-remote $monodest $MTDB_REF | awk '{print $1}')
    [ -n "$MTDB_SHA1" ] || return 0
    run git fetch --force $monodest $MTDB_REF:$MTDB_LOCAL_REF ||
        error "failed to fetch $MTDB_REF from $monodest"
}

mt_check_clone() {
    [ -e "$clone" ] || return 1

    # If the clone exists but is not configured correctly, we need to remove it
    # so it can be recreated.  Defer to an impl.
    mt_check_clone_impl "$@" && return 0
    run rm -rf "$clone"
    return 1
}

mt_check_clone_impl() {
    # Must be a git directory configured with a single remote, "origin".
    [ -d "$clone" ] || return 1
    [ . = "$(run $hide git -C "$clone" rev-parse --git-dir)" ] || return 1
    [ origin = "$(run $hide git -C "$clone" remote)" ] || return 1

    # Check and try to fix the URL.
    [ "$url" = "$(run $hide git -C "$clone" remote get-url origin --all)" ] ||
        run $hide git -C "$clone" remote set-url origin "$url" ||
        return 1

    # Remove mirror configuration, since this causes problems for pushes of
    # refspecs with old Git clients.
    local config="$clone"/config
    local key=remote.origin.mirror
    ! run $hide git --file "$config" config $key ||
        run $hide git --file "$config" config --unset $key ||
        return 1

    # Mirror when fetching.
    local fetchspec="+refs/*:refs/*"
    key=remote.origin.fetch
    [ "$fetchspec" = "$(run $hide git --file "$config" config $key)" ] ||
        run $hide git --file "$config" config --replace-all $key "$fetchspec" ||
        return 1

    # No push configuration.
    key=remote.origin.push
    [ -z "$(run $hide git --file "$config" config $key)" ] ||
        run $hide git --file "$config" config --unset-all $key ||
        return 1

    # Looks good.
    return 0
}

mt_make_clone() {
    [ -e "$clone" ] && return 1

    run $hide mkdir -p $(dirname $clone) &&
        run $hide git init --bare $clone  &&
        run $hide git -C $clone remote add --mirror=fetch origin $url &&
        return 0

    rm -rf "$clone"
    return 1
}

mt_setup_repo() {
    local clone=clones/$name.git
    log "  - $name"
    mt_check_clone >$gitout || mt_make_clone >$gitout ||
        error "failed to mirror remote '$name'"

    run $hide git -C $clone remote update --prune >$gitout ||
        error "failed to update remote '$name'"
}

has_no_spaces() { [ "${1/ /}" = "$1" ]; }
mt_generate() {
    local action="$1"
    local object="$2"
    local generator="mt_generate_$action"
    local fetcher="mt_fetch_$action"
    local pusher="mt_push_$action"

    [ "$(git symbolic-ref "$MTDB_REF" 2>/dev/null)" = "$MTDB_LOCAL_REF" ] ||
        run git symbolic-ref -m "mt generate" "$MTDB_REF" "$MTDB_LOCAL_REF" ||
        error "failed to set up $MTDB_REF"

    mt_llvm_svn2git_init ||
        error "generate: could not initialize svn2git"

    # Check that we have a generator for this.
    is_function "$generator" ||
        error "generate: unknown action '$action'"

    # Check for a non-empty argument with no spaces.
    [ -n "$object" ] ||
        error "generate: missing action '$action'"
    has_no_spaces "$object" ||
        error "generate: invalid object '$object'"

    log "Generating $action for $object"
    push_only || $fetcher "$object" || exit 1
    push_only || $generator "$object" || exit 1
    should_push || return 0
    $pusher "$object" || exit 1
}

mt_generate_mapping() {
    local remote=$1
    local branches="$(git show-ref | awk '{print $2}' |
    grep ^refs/remotes/$remote)"

    [ -n "$branches" ] || error "no branches found under '$remote'"
    local branch rev
    for branch in $branches; do
        rev=$(mt_llvm_svn $branch) ||
            error "generate mapping: '$branch' has no LLVM revision"
        if (mt_llvm_svn2git "$rev" >/dev/null); then
            log "Mapping for '$branch' up-to-date"
            continue
        fi
        log "Generating mapping for '$branch'"
        run --dry git apple-llvm mt llvm-svn2git-map $branch ||
            error "failed to generate mapping for '$branch'"
    done
}

mt_fetch_mapping() {
    # Nothing to do here, since this is handled by mt_setup.
    true
}

mt_push_mapping() {
    local old_mtdb_sha1=$MTDB_SHA1
    MTDB_SHA1=$(run git show-ref $MTDB_REF | awk '{print $1}')
    [ ! "$old_mtdb_sha1" = "$MTDB_SHA1" ] || return 0

    local monodest
    monodest="$(show_monorepo_destination)" || exit 1
    {
        # Push to the local mirror.
        run --dry git push $monodest $MTDB_REF:$MTDB_REF \
            --force-with-lease=$MTDB_REF:$old_mtdb_sha1 &&

        # Push to the remote using --force-with-lease to check for races.
        run --dry git -C clones/$monodest.git push origin $MTDB_REF:$MTDB_REF \
            --force-with-lease=$MTDB_REF:$old_mtdb_sha1
    } || error "failed to push $MTDB_REF to $monodest"
}

mt_generate_branch() {
    # Get the branch name and prepend refs/heads/.
    local heads=refs/heads/
    local rawbranch=$1
    local branch=$rawbranch
    [ "${branch:0:${#heads}}" = $heads ] || branch=$heads$branch

    local refdirs repeat
    refdirs="$(print_active_refdirs "$rawbranch")" ||
        error "failed to extract active refdirs for $rawbranch"
    repeat="$(print_repeat "$rawbranch")" ||
        error "failed to extract any repeat directive for $rawbranch"

    [ -n "$refdirs" ] ||
        error "generate $branch: no 'dir' declarations"

    local refdir ref dir dirs
    for refdir in $refdirs; do
        ref=${refdir%:*}
        dir=${refdir#*:}
        dirs="${dirs}${dirs:+ }$dir"
        [ "$refdir" = "$ref:$dir" ] ||
            error "generate $branch: invalid 'dir' with colon '$refdir'"
        run --dry git rev-parse $ref^{commit} >/dev/null ||
            error "generate $branch: invalid ref '$ref' in dir '$dir'"
        [ "$dir" = "*" ] &&
            error "generate $branch: invalid dir '$dir' for ref '$ref'"
    done
    if [ -n "$repeat" ]; then
        [ "${repeat:0:${#heads}}" = $heads ] || repeat=$heads$repeat
        repeat="${repeat%\{*\}}"
        run --dry git rev-parse $repeat^{commit} >/dev/null ||
            error "generate $branch: invalid repeat ref '$ref'"
    fi

    refdirs="$(print_all_refdirs "$rawbranch")" ||
        error "failed to extract complete refdirs for $rawbranch"

    run --dry git apple-llvm mt translate-branch $branch $refdirs ||
        error "failed to generate branch '$branch'"
}

mt_fetch_branch() {
    local rawbranch="$1"
    local branch="$rawbranch"
    local heads=refs/heads/
    [ "${branch:0:${#heads}}" = $heads ] || branch=$heads$branch

    # Fetch from local mirror.
    local monodest repeat
    monodest="$(show_monorepo_destination)" || exit 1
    repeat="$(print_repeat "$rawbranch")" ||
        error "failed to extract any repeat directive for $rawbranch"
    mt_fetch_one_branch "$monodest" "$branch"
    mt_fetch_one_branch "$monodest" "refs/heads/mt/$rawbranch/mt-repeat"

    local splitdest refdirs
    splitdest="$(show_splitref_destination)" || exit 1
    refdirs="$(print_active_refdirs "$rawbranch")" || exit 1
    for refdir in $refdirs; do
        d=${refdir#*:}
        mt_fetch_one_branch "$splitdest" "refs/heads/mt/$rawbranch/$d/mt-split"
    done

    mt_fetch_splitrefs "$rawbranch"
}

mt_fetch_splitrefs() {
    local branch="$1"
    local splitdest refdirs
    refdirs="$(print_active_refdirs "$branch")" ||
        error "failed to extract active refdirs for $branch"
    splitdest="$(show_splitref_destination)" || exit 1
    for refdir in $refdirs; do
        d=${refdir#*:}
        mt_fetch_one_branch "$splitdest" "refs/heads/mt/$branch/$d/mt-split"
    done
}

mt_fetch_one_branch() {
    local remote="$1"
    local branch="$2"

    local remote_ref="refs/remotes/$remote/${branch#refs/heads/}"
    local sha1
    sha1="$(run --hide-errors git rev-parse "$remote_ref"^{commit})" || return 0
    run --dry git update-ref "$branch" "$sha1" ||
        error "failed to sync '$branch' from '$remote'"
}

mt_push_branch() {
    local branch="$1"
    local old_mtdb_sha1=$MTDB_SHA1
    MTDB_SHA1=$(run git show-ref $MTDB_REF | awk '{print $1}')

    # Return early if nothing has changed.
    [ ! "$old_mtdb_sha1" = "$MTDB_SHA1" ] ||
        return 0

    # Push the primary refs.  Need to push to the local mirror, and then from
    # there to the actual remote.
    local monodest repeat
    monodest="$(show_monorepo_destination)" || exit 1
    repeat="$(print_repeat "$branch")" ||
        error "failed to extract any repeat directive for $branch"
    local repeatref
    if [ -n "$repeat" ]; then
        repeatref=refs/heads/mt/$branch/mt-repeat
        run --hide-errors git rev-parse --verify $repeatref^{commit} ||
            repeatref=
    fi
    run --dry git push $monodest $MTDB_REF:$MTDB_REF $branch $repeatref \
        --force-with-lease=$MTDB_REF:$old_mtdb_sha1 ||
        error "failed to push $MTDB_REF to local $monodest"
    run --dry git -C clones/$monodest.git push --atomic origin \
        $MTDB_REF:$MTDB_REF $branch $repeatref                 \
        --force-with-lease=$MTDB_REF:$old_mtdb_sha1 ||
        error "failed to push $branch and $MTDB_REF to $monodest"

    mt_push_splitrefs "$branch"
}

mt_push_splitrefs() {
    local branch="$1"

    # Push the mt-split refs, which are only needed to optimize the next call.
    local splitdest refdir d ref refs refspec refspecs
    splitdest="$(show_splitref_destination)" || exit 1
    for refdir in $(print_active_refdirs "$branch"); do
        d=${refdir#*:}
        ref="refs/heads/mt/$branch/$d/mt-split"
        run --hide-errors git rev-parse "$ref"^{commit} >/dev/null ||
            continue
        refs="$refs${refs:+ }$refs"
        refspec="$ref:$ref"
        refspecs="$refspecs${refspecs:+ }$refspec"
    done
    [ -n "$refspecs" ] || return 0
    run --dry git push $splitdest $refspecs ||
        error "failed to push $refs to local $splitdest"
    run --dry git -C clones/$splitdest.git push --atomic origin $refspecs ||
        error "failed to push $refs to $splitdest"
}

mt_generate_splitrefs() {
    # Get the branch name and prepend refs/heads/.
    local heads=refs/heads/
    local rawbranch=$1
    local branch=$rawbranch
    [ "${branch:0:${#heads}}" = $heads ] || branch=$heads$branch

    local refdirs="$(print_active_refdirs "$rawbranch")"
    local repeat="$(print_repeat "$rawbranch")"

    [ -n "$refdirs" ] ||
        error "generate $branch: no 'dir' declarations"
    [ -z "$repeat" ] || error "generate: splitrefs does not support repeat"

    local refdir ref dir
    for refdir in $refdirs; do
        ref=${refdir%:*}
        dir=${refdir#*:}
        [ "$refdir" = "$ref:$dir" ] ||
            error "generate $branch: invalid 'dir' with colon '$refdir'"
        run git rev-parse $ref^{commit} >/dev/null ||
            error "generate $branch: invalid ref '$ref' in dir '$dir'"
        [ "$dir" = "*" ] &&
            error "generate $branch: invalid dir '$dir' for ref '$ref'"
    done

    run --dry git apple-llvm mt update-splitrefs $branch $refdirs ||
        error "failed to update splitrefs for '$branch'"
}

CONFIG_DIR="$DEFAULT_CONFIG_DIR"
GIT_DIR=$DEFAULT_GIT_DIR

# FIXME: consider setting CLEAN=1 by default.
SETUP=1 CLEAN=0 PUSH=1 PUSH_ONLY=0
should_setup() { [ ! "${SETUP:-0}" = 0 ]; }
should_clean() { [ ! "${CLEAN:-0}" = 0 ]; }
should_push() { [ ! "${PUSH:-0}" = 0 ]; }
push_only() { [ ! "${PUSH_ONLY:-0}" = 0 ]; }
NAME=
while [ $# -gt 0 ]; do
    case "$1" in
        --config-dir|--config-dir=*)
            parse_cmdline_option --config-dir CONFIG_DIR "$@"
            shift $?
            [ -n "$CONFIG_DIR" ] || usage_error "--config-dir cannot be empty"
            [ -d "$CONFIG_DIR" ] ||
                usage_error "expected config dir '$CONFIG_DIR' to be directory"
            ;;
        --git-dir|--git-dir=*)
            parse_cmdline_option --git-dir GIT_DIR "$@"
            shift $?
            [ -n "$GIT_DIR" ] || usage_error "--git-dir cannot be empty"
            ;;
        --verbose|-v) export VERBOSE=1; shift ;;
        --no-verbose) export VERBOSE=0; shift ;;
        --dry-run)  DRY_RUN=1; shift ;;
        --setup)    SETUP=1; shift ;;
        --no-setup) SETUP=0; shift ;;
        --push)     PUSH=1; shift ;;
        --no-push)  PUSH=0; shift ;;
        --clean)    CLEAN=1; shift ;;
        --no-clean) CLEAN=0; shift ;;
        --push-only)PUSH_ONLY=1; shift ;;
        --list-*-*dirs|--list-*-*dirs=*)
            LIST="$1"
            parse_cmdline_option "--list-*-*dirs" LIST_BRANCH "$@"
            shift $?
            [ -n "$LIST_BRANCH" ] ||
                usage_error "${LIST%=} requires an argument"
            ;;
        --list-repeat|--list-repeat=*)
            LIST="$1"
            parse_cmdline_option "--list-repeat" LIST_BRANCH "$@"
            shift $?
            [ -n "$LIST_BRANCH" ] ||
                usage_error "${LIST%=} requires an argument"
            ;;
        --list-*=*) usage_error "unknown option '$1'" ;;
        --list-*|--show-*) LIST="$1"; shift ;;
        --help|--usage|-h) usage; exit 0 ;;
        -*) usage_error "unknown option '$1'" ;;
        *)
            [ -z "$NAME" ] || usage_error "too many positional arguments"
            [ -n "$1" ] || usage_error "empty name for downstream"
            has_no_spaces "$1" || usage_error "branch name '$1' has spaces"
            NAME=$1
            MT_CONFIG="$CONFIG_DIR/$NAME.mt-config"
            [ -r "$MT_CONFIG" ] ||
                usage_error "cannot read '$MT_CONFIG'"
            MTDB_LOCAL_REF="$MTDB_REF.$NAME"
            shift
            ;;
    esac
done

if push_only && should_clean; then
    usage_error "refusing to --clean when invoked with --push-only"
fi

[ -n "$MT_CONFIG" ] || usage_error "missing name of mt-config"
if [ -n "$LIST" ]; then
    print_list "$LIST" "$LIST_BRANCH"
    exit $?
fi

mt_setup || exit 1
print_actions |
while read action object; do
    mt_generate "$action" "$object" ||
        error "failed to generate '$action' using '$object'"
done
exit $?
