#!/bin/bash

NONGIT_OK=1
. "$(dirname "$0")"/helpers/init.sh
helper canonicalize_path

usage() {
    printf "%s\n"                                                             \
        "usage: $(print_cmdname) [options] <downstream>"                      \
        ""                                                                    \
        "   --config-dir=<dir> Config directory (default: $DEFAULT_CONFIG_DIR)"  \
        "   --git-dir=<dir>    Git directory (default: $DEFAULT_GIT_DIR)"     \
        "   --[no-]verbose     Print out what will happen"                    \
        "   --dry-run          Don't do anything"
}

DEFAULT_CONFIG_DIR="$(
    relative_canonicalize_path "$APPLE_LLVM_LIBEXEC_DIR/../../fwd-config")"
DEFAULT_GIT_DIR=apple-llvm-fwd-repo.git

is_not_same_url() {
    local url="$1"
    local existing="$2"
    if [ "$url" = "$existing" ]; then
        return 1
    fi
    return 0
}

print_remotes() {
    run cat "$FWD_CONFIG" | run awk '
    $1 == "remote" { urls[$2] = $3 }
    $1 == "remote-tags" { tags[$2] = 1 }
    END {
        for (r in urls) {
            if (tags[r]) {
                printf "%s:tags:%s\n", r, urls[r]
            } else {
                printf "%s::%s\n", r, urls[r]
            }
        }
    }' | sort
}

fwd_setup() {
    GIT_DIR="$(canonicalize_path "$GIT_DIR")"
    FWD_CONFIG="$(canonicalize_path "$CONFIG_DIR/$NAME.fwd-config")"
    [ -f "$FWD_CONFIG" ] ||
        usage_error "config for '$NAME' not found at '$FWD_CONFIG'"

    # Always change directory.
    log "Updating remotes up and syncing $GIT_DIR"
    run --hide-errors --dry git --git-dir="$GIT_DIR" show-ref >/dev/null ||
        run --dry git init --bare || error "failed to create '$GIT_DIR'"

    # Configure protocol.
    if $GIT_v2_18_OR_NEWER; then
        run --dry git config --local --replace-all protocol.version 2
    fi

    # Format: <name> ':' 'tags'? ':' <url>
    for remote in $(print_remotes); do
        name="${remote%%:*}"
        tagsurl="${remote#*:}"
        tags="${tagsurl%%:*}"
        url="${tagsurl#*:}"

        log "  - $name $url${tags:+ [+tags]}"
        existing="$(run --dry git remote -v |
        run --dry awk -v n="$name" -v e="(fetch)" '$1==n&&$3==e{print $2}')"
        existing_push="$(run --dry git remote -v |
        run --dry awk -v n="$name" -v e="(push)" '$1==n&&$3==e{print $2}')"
        if [ -z "$existing" ]; then
            run --dry git remote add "$name" "$url"
        elif is_not_same_url $url $existing; then
            error "remote '$name' exists with fetch URL '$existing';" \
            "refusing to set-url to '$url'"
        elif [ -n $existing_push ] && is_not_same_url $url $existing_push; then
            error "remote '$name' exists with push URL '$existing';" \
            "refusing to set-url to '$url'"
        fi

        # Handle tags manually.
        run --dry git config --local --replace-all "remote.$name.tagOpt" --no-tags

        fetch_remote $name $tags
    done
}

collect_source_refspecs() {
    cat "$FWD_CONFIG" |
    awk '$1 == "push" {print $3}' |
    awk -v r=$1 '
        BEGIN {
            remote = "refs/remotes/" r "/"
            plus_remote = "+" remote
            tags_remote = "refs/remote-tags/" r "/"
            plus_tags_remote = "+" tags_remote
        }
        index($1, remote) == 1 { print $0 }
        index($1, plus_remote) == 1 { print $0 }
        index($1, tags_remote) == 1 { print $0 }
        index($1, plus_tags_remote) == 1 { print $0 }
        '
}

fetch_remote() {
    local name=$1
    local tags=$2

    # Collect refs sourced from this remote.
    local refs
    refs="$(collect_source_refspecs $name)" ||
        error "failed to parse $FWD_CONFIG"

    # Don't fetch if this isn't a source.
    [ -n "$refs" ] || return 0

    # Construct refspecs manually.  Bring in all heads (and tags, if specified)
    # to simplify packing on the remote.
    local -a refspecs
    refspecs=( "+refs/heads/*:refs/remotes/$name/*" )
    [ -z "$tags" ] ||
        refspecs=( "${refspecs[@]}" "+refs/tags/*:refs/remote-tags/$name/*" )

    # Only negotiate with remote using refs from that remote; it's unlikely
    # other remotes will speed anything up here.
    #
    # Note: Using for-each-ref to gather SHA-1s since when --negotation-tip was
    # introduced (and at least up to 2.21.0) it did not accept patterns.
    local tips
    if $GIT_v2_18_OR_NEWER; then
        tips="$(run --dry git for-each-ref \
            --format="--negotiation-tip %(objectname)" \
            "refs/remotes/$name/*" "refs/remote-tags/$name/*")" ||
            error "failed to iterate through remote tips of $name"
    fi

    log "    => fetching ${refspecs[*]}"
    run --dry git fetch --prune "$name" $tips "${refspecs[@]}" ||
        error "failed to fetch from '$name'"
}

lookup_git_v2_18_plus() {
    GIT_v2_18_OR_NEWER=false
    local v
    v="$(git --version 2>/dev/null | awk '$1 == "git" && $2 == "version" {print $3}')" ||
        return 0
    [ -n "$v" ] || return 0

    local rest="$v"
    local next result
    for n in 2 18; do
        next="${rest%%.*}"
        rest="${rest#*.}"
        result=$(( $n - $next )) 2>/dev/null || return 0
        [ "$result" -le 0 ] || return 0
        [ "$result" -lt 0 ] || continue
        GIT_v2_18_OR_NEWER=true
        return 0
    done

    GIT_v2_18_OR_NEWER=true
    return 0
}
lookup_git_v2_18_plus

CONFIG_DIR="$DEFAULT_CONFIG_DIR"
GIT_DIR=$DEFAULT_GIT_DIR
SETUP=1
NAME=
while [ $# -gt 0 ]; do
    case "$1" in
        --config-dir|--config-dir=*)
            parse_cmdline_option --config-dir CONFIG_DIR "$@"
            shift $?
            [ -n "$CONFIG_DIR" ] || usage_error "--config-dir cannot be empty"
            [ -d "$CONFIG_DIR" ] || usage_error "'$CONFIG_DIR' not a directory"
            ;;
        --git-dir|--git-dir=*)
            parse_cmdline_option --git-dir GIT_DIR "$@"
            shift $?
            [ -n "$GIT_DIR" ] || usage_error "--git-dir cannot be empty"
            ;;
        --dry-run)  DRY_RUN=1; shift ;;
        --verbose)    VERBOSE=1; shift ;;
        --no-verbose) VERBOSE=0; shift ;;
        --help|--usage|-h) usage; exit 0 ;;
        -*) usage_error "unknown option '$1'" ;;
        *)
            [ -z "$NAME" ] || usage_error "too many positional arguments"
            [ -n "$1" ] || usage_error "empty name for downstream"
            NAME="$1"
            shift
            ;;
    esac
done

[ -n "$NAME" ] || usage_error "missing name of fwd-config"

# Export GIT_DIR so that child git processes use it
export GIT_DIR

fwd_setup || exit 1

collect_pushes() {
    cat "$FWD_CONFIG" | awk '
    $1 == "push" {
        if (pushes[$2]) { pushes[$2] = pushes[$2] "," $3 }
        else { pushes[$2] = $3 }
    }
    END {
        for (r in pushes) {
            printf "%s|%s\n", r, pushes[r]
        }
    }' | sort
}

check_locally_for_changes() {
    local name="$1"

    # Compare local and (cached) remote.  Return early if there's nothing to
    # push.  The algorithm for comparing local and remote is as follows:
    #
    # - Print refs/remotes/<name>/* (the cached remote refs) as:
    #       'old SHA-1 refs/heads/*'
    #   replacing the first three components with "refs/heads/".
    # - Print refs/heads/* (the refs to push) as:
    #       'new SHA-1 refs/heads/*'
    # - (Do the same for "refs/tags/*".)
    # - Sort by the refname, putting old/new lines adjacent to each other.
    # - Use 'uniq' to delete refs that shows up twice with the same SHA-1.
    #   The '-f 1' causes the old/new to be ignored in the comparison.
    # - If there aren't any 'new' lines left, skip this remote.
    {
        # refs/heads/*
        run --dry git for-each-ref                                      \
            --format='old %(objectname) refs/heads/%(refname:lstrip=3)' \
            refs/remotes/$name/
        run --dry git for-each-ref                  \
            --format='new %(objectname) %(refname)' \
            refs/heads/

        # refs/tags/*
        run --dry git for-each-ref                                     \
            --format='old %(objectname) refs/tags/%(refname:lstrip=3)' \
            refs/remote-tags/$name/
        run --dry git for-each-ref                  \
            --format='new %(objectname) %(refname)' \
            refs/tags/
    } | sort -k 3,3 | uniq -u -f 1 | grep -q ^new
}

log "Forwarding refs"
for push in $(collect_pushes); do
    name="${push%%|*}"
    refspecs="${push#*|}"
    refspecs="${refspecs//,/ }"

    # Confirm refspecs only push to refs/heads/* and refs/tags/*.
    for refspec in $refspecs; do
        target="${refspec#*:}"
        case $target in
            refs/heads/*) true;;
            refs/tags/*) true;;
            # We can support other namespaces in the future, but we need to
            # know about them.
            *) error "'$refspec' pushes outside of refs/{heads,tags}/*"
        esac
    done

    # Clear out local refs/heads/ and refs/tags/ to create a "clean" ref
    # namespace to compare to the remote.
    run --dry git push --prune --quiet "$GIT_DIR" \
        "refs/no-fwd-refs/*:refs/heads/*" \
        "refs/no-fwd-refs/*:refs/tags/*"

    # Push locally.  This will fill up "refs/heads/*" and "refs/tags/*" as if
    # we were pushing to the remote... but without network traffic.
    run --dry git push --quiet "$GIT_DIR" $refspecs ||
        error "failed to push '$refspecs' to '$name'"

    # Check for changes, comparing:
    # - refs/heads/* against refs/remotes/<name/*
    # - refs/tags/* against refs/remote-tags/<name/*
    check_locally_for_changes "$name" || continue

    # Push to the remote.
    run --dry git push "$name" $refspecs ||
        error "failed to push '$refspecs' to '$name'"

    # The remote push will have saved the local heads in refs/remotes/*.  Manually
    # store the pushed tags similarly in refs/remote-tags/*.  We'll need these
    # to compare next time.
    run --dry git push --quiet "$GIT_DIR" \
        "+refs/tags/*:refs/remote-tags/$name/*"
done
exit 0
