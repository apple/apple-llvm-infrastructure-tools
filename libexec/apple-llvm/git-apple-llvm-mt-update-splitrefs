#!/bin/bash

. "$(dirname "$0")"/helpers/init.sh
helper bisect
helper mt_split2mono

usage() {
    printf "%s\n" \
        "usage: $(print_cmdname) [--check-for-work] <branch> <ref>:<dir>..."\
        ""                                                                  \
        "  Update <branch> refs ending in /mt-split based on the given"     \
        "  <ref>:<dir> info"                                                \
        ""                                                                  \
        "  --check-for-work     Print the refs that need to be updated,"    \
        "                       but don't update them"
}

CHECK_FOR_WORK=0
check_for_work() { [ ! "${CHECK_FOR_WORK:-0}" = 0 ]; }

main() {
    if [ "$1" = --check-for-work ]; then
        CHECK_FOR_WORK=1
        shift
    fi

    [ "$#" -ge 1 ] || usage_error "missing <branch>"
    [ "$#" -ge 2 ] || usage_error "missing <ref>:<dir> (minimum 1)"

    local branch="${1#refs/heads/}"
    shift
    mt_split2mono_init || exit 1
    local refdir
    local forks=
    log "Updating splitrefs for $branch"
    for refdir in "$@"; do
        update_splitref "$branch" "$refdir" &
        forks="$forks${forks:+ }$!"
    done
    wait $forks
}

is_mapped() { mt_split2mono "$@" >/dev/null; }
update_splitref() {
    local branch="$1"
    local refdir="$2"
    local ref=${refdir%:*}
    local dir=${refdir#*:}

    local mtref=refs/heads/mt/$branch/$dir/mt-split
    local already_mapped refcommit
    already_mapped=$(run git rev-parse --verify $mtref^{commit} 2>/dev/null)
    refcommit=$(run git rev-parse --verify $ref^{commit} 2>/dev/null)
    [ -n "$refcommit" ] || error "ref '$ref' is not a commit"
    [ "$already_mapped" = "$refcommit" ] && return 0
    local mapped="$(bisect is_mapped $ref $already_mapped)"
    [ -n "$mapped" ] || return 0
    local last_mapped="$(run git rev-list -1 $mapped)"
    [ -n "$last_mapped" ] || return 0
    [ "$already_mapped" = "$last_mapped" ] && return 0

    if check_for_work; then
        printf "%s\n" "$mtref"
        return 0
    fi

    log " - ${mtref#refs/heads/} => $last_mapped"
    run git update-ref $mtref $last_mapped ||
        error "failed to update $mtref"
}

main "$@"
